'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@mantine/core');
var hooks = require('@mantine/hooks');
var dayjs = require('dayjs');
var TimeField = require('../TimeInput/TimeField/TimeField.js');
var createTimeHandler = require('../TimeInput/create-time-handler/create-time-handler.js');
var getTimeValue = require('../TimeInput/get-time-values/get-time-value.js');
var TimeRangeInput_styles = require('./TimeRangeInput.styles.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TimeRangeInput = React.forwardRef((_a, ref) => {
  var _b = _a, {
    required,
    label,
    error,
    description,
    className,
    style,
    size = "sm",
    wrapperProps,
    classNames,
    styles,
    id,
    value,
    defaultValue,
    onChange,
    withSeconds = false,
    name,
    hoursLabel,
    minutesLabel,
    secondsLabel,
    labelSeparator = "\u2013",
    disabled = false,
    sx
  } = _b, others = __objRest(_b, [
    "required",
    "label",
    "error",
    "description",
    "className",
    "style",
    "size",
    "wrapperProps",
    "classNames",
    "styles",
    "id",
    "value",
    "defaultValue",
    "onChange",
    "withSeconds",
    "name",
    "hoursLabel",
    "minutesLabel",
    "secondsLabel",
    "labelSeparator",
    "disabled",
    "sx"
  ]);
  const { classes, cx } = TimeRangeInput_styles['default']({ size }, { classNames, styles, name: "TimeRangeInput" });
  const { mergedStyles, rest } = core.useExtractedMargins({ others, style });
  const uuid = hooks.useUuid(id);
  const fromDate = new Date();
  const toDate = new Date(new Date().valueOf() + 1e3);
  const [_value, handleChange] = hooks.useUncontrolled({
    value,
    defaultValue,
    finalValue: [fromDate, toDate],
    rule: (val) => val && val.length === 2 && val.every((v) => v instanceof Date),
    onChange
  });
  const hoursRef = React.useRef([]);
  const minutesRef = React.useRef([]);
  const secondsRef = React.useRef([]);
  const [fromTime, setFromTime] = React.useState(getTimeValue.getTimeValues(_value[0]));
  const [toTime, setToTime] = React.useState(getTimeValue.getTimeValues(_value[1]));
  const [selectedFieldIndex, setSelectedFieldIndex] = React.useState(0);
  hooks.useDidUpdate(() => {
    setFromTime(getTimeValue.getTimeValues(_value[0]));
    setToTime(getTimeValue.getTimeValues(_value[1]));
  }, [_value]);
  const setTime = (cb) => {
    selectedFieldIndex === 0 ? setFromTime(cb) : setToTime(cb);
  };
  const constructDayjsValue = (fieldName, val) => {
    const index = selectedFieldIndex;
    const newTime = [..._value];
    newTime[index] = dayjs__default(newTime[index]).set(fieldName, parseInt(val, 10)).toDate();
    return newTime;
  };
  const handleHoursChange = createTimeHandler.createTimeHandler({
    onChange: (val) => {
      setTime((current) => __spreadProps(__spreadValues({}, current), { hours: val }));
      handleChange(constructDayjsValue("hours", val));
    },
    min: 0,
    max: 23,
    maxValue: 2,
    nextRef: {
      current: minutesRef.current[selectedFieldIndex]
    }
  });
  const handleMinutesChange = createTimeHandler.createTimeHandler({
    onChange: (val) => {
      setTime((current) => __spreadProps(__spreadValues({}, current), { minutes: val }));
      handleChange(constructDayjsValue("minutes", val));
    },
    min: 0,
    max: 59,
    maxValue: 5,
    nextRef: {
      current: !withSeconds && selectedFieldIndex === 0 ? hoursRef.current[1] : secondsRef.current[selectedFieldIndex]
    }
  });
  const handleSecondsChange = createTimeHandler.createTimeHandler({
    onChange: (val) => {
      setTime((current) => __spreadProps(__spreadValues({}, current), { seconds: val }));
      handleChange(constructDayjsValue("seconds", val));
    },
    min: 0,
    max: 59,
    maxValue: 5,
    nextRef: {
      current: selectedFieldIndex === 0 ? hoursRef.current[1] : void 0
    }
  });
  return /* @__PURE__ */ React__default.createElement(core.InputWrapper, __spreadValues({
    required,
    label,
    error,
    description,
    className,
    style: mergedStyles,
    classNames,
    styles,
    size,
    __staticSelector: "TimeRangeInput",
    id: uuid,
    sx
  }, wrapperProps), /* @__PURE__ */ React__default.createElement(core.Input, __spreadValues({
    component: "div",
    __staticSelector: "TimeRangeInput",
    required,
    invalid: !!error,
    onClick: () => {
      setSelectedFieldIndex(0);
      hoursRef.current[selectedFieldIndex].focus();
    },
    size,
    className: cx({ [classes.disabled]: disabled }),
    classNames,
    styles,
    disabled
  }, rest), /* @__PURE__ */ React__default.createElement("div", {
    className: classes.inputWrapper
  }, /* @__PURE__ */ React__default.createElement(TimeField.TimeField, {
    ref: hooks.useMergedRef((node) => {
      hoursRef.current[0] = node;
    }, ref),
    value: fromTime.hours,
    onChange: handleHoursChange,
    setValue: (val) => handleHoursChange(val, false),
    id: uuid,
    className: classes.timeField,
    withSeparator: true,
    size,
    max: 23,
    "aria-label": `from ${hoursLabel}`,
    disabled,
    onFocus: () => setSelectedFieldIndex(0)
  }), /* @__PURE__ */ React__default.createElement(TimeField.TimeField, {
    ref: (node) => {
      minutesRef.current[0] = node;
    },
    value: fromTime.minutes,
    onChange: handleMinutesChange,
    setValue: (val) => setFromTime((c) => __spreadProps(__spreadValues({}, c), { minutes: val })),
    className: classes.timeField,
    withSeparator: withSeconds,
    size,
    max: 59,
    "aria-label": `from ${minutesLabel}`,
    disabled,
    onFocus: () => setSelectedFieldIndex(0)
  }), withSeconds && /* @__PURE__ */ React__default.createElement(TimeField.TimeField, {
    ref: (node) => {
      secondsRef.current[0] = node;
    },
    value: fromTime.seconds,
    onChange: handleSecondsChange,
    setValue: (val) => setFromTime((c) => __spreadProps(__spreadValues({}, c), { seconds: val })),
    className: classes.timeField,
    size,
    max: 59,
    "aria-label": `from ${secondsLabel}`,
    disabled,
    onFocus: () => setSelectedFieldIndex(0)
  }), /* @__PURE__ */ React__default.createElement("span", {
    className: classes.separator
  }, labelSeparator), /* @__PURE__ */ React__default.createElement("div", {
    className: classes.inputWrapper
  }, /* @__PURE__ */ React__default.createElement(TimeField.TimeField, {
    ref: (node) => {
      hoursRef.current[1] = node;
    },
    value: toTime.hours,
    onChange: handleHoursChange,
    setValue: (val) => handleHoursChange(val, false),
    className: classes.timeField,
    withSeparator: true,
    size,
    max: 23,
    "aria-label": `to ${hoursLabel}`,
    disabled,
    onFocus: () => setSelectedFieldIndex(1)
  }), /* @__PURE__ */ React__default.createElement(TimeField.TimeField, {
    ref: (node) => {
      minutesRef.current[1] = node;
    },
    value: toTime.minutes,
    onChange: handleMinutesChange,
    setValue: (val) => setToTime((c) => __spreadProps(__spreadValues({}, c), { minutes: val })),
    className: classes.timeField,
    withSeparator: withSeconds,
    size,
    max: 59,
    "aria-label": `to ${minutesLabel}`,
    disabled,
    onFocus: () => setSelectedFieldIndex(1)
  }), withSeconds && /* @__PURE__ */ React__default.createElement(TimeField.TimeField, {
    ref: (node) => {
      secondsRef.current[1] = node;
    },
    value: toTime.seconds,
    onChange: handleSecondsChange,
    setValue: (val) => setToTime((c) => __spreadProps(__spreadValues({}, c), { seconds: val })),
    className: classes.timeField,
    size,
    max: 59,
    "aria-label": `to ${secondsLabel}`,
    disabled,
    onFocus: () => setSelectedFieldIndex(1)
  })), name && /* @__PURE__ */ React__default.createElement("input", {
    type: "hidden",
    name: `${name}-from`,
    value: _value[0].toISOString()
  }), name && /* @__PURE__ */ React__default.createElement("input", {
    type: "hidden",
    name: `${name}-to`,
    value: _value[1].toISOString()
  }))));
});
TimeRangeInput.displayName = "@mantine/dates/TimeRangeInput";

exports.TimeRangeInput = TimeRangeInput;
//# sourceMappingURL=TimeRangeInput.js.map
