import React, { forwardRef, useRef, useState } from 'react';
import { useExtractedMargins, InputWrapper, Input } from '@mantine/core';
import { useUuid, useUncontrolled, useDidUpdate, useMergedRef } from '@mantine/hooks';
import dayjs from 'dayjs';
import { TimeField } from './TimeField/TimeField.js';
import { createTimeHandler } from './create-time-handler/create-time-handler.js';
import { getTimeValues } from './get-time-values/get-time-value.js';
import useStyles from './TimeInput.styles.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TimeInput = forwardRef((_a, ref) => {
  var _b = _a, {
    required,
    label,
    error,
    description,
    className,
    style,
    size = "sm",
    wrapperProps,
    classNames,
    styles,
    id,
    value,
    defaultValue,
    onChange,
    withSeconds = false,
    name,
    hoursLabel,
    minutesLabel,
    secondsLabel,
    disabled = false,
    sx
  } = _b, others = __objRest(_b, [
    "required",
    "label",
    "error",
    "description",
    "className",
    "style",
    "size",
    "wrapperProps",
    "classNames",
    "styles",
    "id",
    "value",
    "defaultValue",
    "onChange",
    "withSeconds",
    "name",
    "hoursLabel",
    "minutesLabel",
    "secondsLabel",
    "disabled",
    "sx"
  ]);
  const { classes, cx } = useStyles({ size }, { classNames, styles, name: "TimeInput" });
  const { mergedStyles, rest } = useExtractedMargins({ others, style });
  const uuid = useUuid(id);
  const [_value, handleChange] = useUncontrolled({
    value,
    defaultValue,
    finalValue: new Date(),
    rule: (val) => val instanceof Date,
    onChange
  });
  const hoursRef = useRef();
  const minutesRef = useRef();
  const secondsRef = useRef();
  const [time, setTime] = useState(getTimeValues(_value));
  useDidUpdate(() => {
    setTime(getTimeValues(_value));
  }, [_value]);
  const handleHoursChange = createTimeHandler({
    onChange: (val) => {
      setTime((c) => __spreadProps(__spreadValues({}, c), { hours: val }));
      handleChange(dayjs(_value).set("hours", parseInt(val, 10)).toDate());
    },
    min: 0,
    max: 23,
    maxValue: 2,
    nextRef: minutesRef
  });
  const handleMinutesChange = createTimeHandler({
    onChange: (val) => {
      setTime((c) => __spreadProps(__spreadValues({}, c), { minutes: val }));
      handleChange(dayjs(_value).set("minutes", parseInt(val, 10)).toDate());
    },
    min: 0,
    max: 59,
    maxValue: 5,
    nextRef: secondsRef
  });
  const handleSecondsChange = createTimeHandler({
    onChange: (val) => {
      setTime((c) => __spreadProps(__spreadValues({}, c), { seconds: val }));
      handleChange(dayjs(_value).set("seconds", parseInt(val, 10)).toDate());
    },
    min: 0,
    max: 59,
    maxValue: 5
  });
  return /* @__PURE__ */ React.createElement(InputWrapper, __spreadValues({
    required,
    label,
    error,
    description,
    className,
    style: mergedStyles,
    classNames,
    styles,
    size,
    __staticSelector: "TimeInput",
    id: uuid,
    sx
  }, wrapperProps), /* @__PURE__ */ React.createElement(Input, __spreadValues({
    component: "div",
    __staticSelector: "TimeInput",
    required,
    invalid: !!error,
    onClick: () => hoursRef.current.focus(),
    size,
    className: cx({ [classes.disabled]: disabled }),
    classNames,
    styles,
    disabled
  }, rest), /* @__PURE__ */ React.createElement("div", {
    className: classes.controls
  }, /* @__PURE__ */ React.createElement(TimeField, {
    ref: useMergedRef(hoursRef, ref),
    value: time.hours,
    onChange: handleHoursChange,
    setValue: (val) => setTime((c) => __spreadProps(__spreadValues({}, c), { hours: val })),
    id: uuid,
    className: classes.timeInput,
    withSeparator: true,
    size,
    max: 23,
    "aria-label": hoursLabel,
    disabled
  }), /* @__PURE__ */ React.createElement(TimeField, {
    ref: minutesRef,
    value: time.minutes,
    onChange: handleMinutesChange,
    setValue: (val) => setTime((c) => __spreadProps(__spreadValues({}, c), { minutes: val })),
    className: classes.timeInput,
    withSeparator: withSeconds,
    size,
    max: 59,
    "aria-label": minutesLabel,
    disabled
  }), withSeconds && /* @__PURE__ */ React.createElement(TimeField, {
    ref: secondsRef,
    value: time.seconds,
    onChange: handleSecondsChange,
    setValue: (val) => setTime((c) => __spreadProps(__spreadValues({}, c), { seconds: val })),
    className: classes.timeInput,
    size,
    max: 59,
    "aria-label": secondsLabel,
    disabled
  }), name && /* @__PURE__ */ React.createElement("input", {
    type: "hidden",
    name,
    value: _value.toISOString()
  }))));
});
TimeInput.displayName = "@mantine/dates/TimeInput";

export { TimeInput };
//# sourceMappingURL=TimeInput.js.map
