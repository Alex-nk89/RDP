'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var MantineProvider = require('../../MantineProvider.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function extractMargins(others) {
  const _a = others, { m, mx, my, mt, mb, ml, mr } = _a, rest = __objRest(_a, ["m", "mx", "my", "mt", "mb", "ml", "mr"]);
  const margins = { m, mx, my, mt, mb, ml, mr };
  Object.keys(margins).forEach((key) => {
    if (margins[key] === void 0) {
      delete margins[key];
    }
  });
  return { margins, rest };
}
function isValidMargin(margin) {
  return typeof margin === "string" || typeof margin === "number";
}
const MARGINS = {
  m: "margin",
  mt: "marginTop",
  mb: "marginBottom",
  ml: "marginLeft",
  mr: "marginRight"
};
function useExtractedMargins({ others, style }) {
  const theme = MantineProvider.useMantineTheme();
  const mergedStyles = __spreadValues({}, style);
  const { margins, rest } = extractMargins(others);
  if (isValidMargin(margins.my)) {
    const margin = theme.fn.size({ size: margins.my, sizes: theme.spacing });
    mergedStyles.marginTop = margin;
    mergedStyles.marginBottom = margin;
  }
  if (isValidMargin(margins.mx)) {
    const margin = theme.fn.size({ size: margins.mx, sizes: theme.spacing });
    mergedStyles.marginLeft = margin;
    mergedStyles.marginRight = margin;
  }
  Object.keys(MARGINS).forEach((margin) => {
    if (isValidMargin(margins[margin])) {
      mergedStyles[MARGINS[margin]] = theme.fn.size({
        size: margins[margin],
        sizes: theme.spacing
      });
    }
  });
  return { mergedStyles, rest };
}

exports.extractMargins = extractMargins;
exports.useExtractedMargins = useExtractedMargins;
//# sourceMappingURL=use-extracted-margins.js.map
